#!/bin/bash

boards="WIPY LOPY SIPY GPY FIPY LOPY4"

function usage() {
  echo "Usage:"
  echo " $0 board-type version-code [micropython-sigfox-git-tag] [esp-idf-git-tag]"
  echo ""
  echo "where board-type in $boards and version-code is a tag for output file"
  echo "micropython-sigfox-git-tag can be anything normally provided to git checkout eg. a commit hash"
  echo "esp-idf-git-tag is optional, and will be extracted from micropython-sigfox if not provided (recommended)"
  echo ""
  exit 1
}

function prepare_dev() {
  echo "Checkout $1 $2 board version-code"

  cd /opt/pycom-micropython-sigfox
  if [ ! -z "$1" ]
  then
    # fetch all branches
    git branch -r | grep -v '\->' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
      # try to find branch revision $1
    git pull
#    if  git pull ; git rev-list $1.. >/dev/null
#
#    then
#        echo "Checkout "
#    else
#        exit 1
#    fi
    cd /opt/pycom-micropython-sigfox
    git checkout $1
  fi

  cd mpy-cross && make clean && make && cd ..
  git submodule update --init

  if [ ! -z "$2" ]
  then
    IDF_HASH=$2
  else
    IDF_HASH=`awk -F "=" '/IDF_HASH/{print $NF}' /opt/pycom-micropython-sigfox/esp32/Makefile`
  fi

  cd /opt/pycom-esp-idf;
  # fetch all branches
  git branch -r | grep -v '\->' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
  # try to find branch revision $2
#  if  git rev-list $2.. >/dev/null
#
#  then
#      echo ""
#      # branch exists
#  else
#     # branch does not exists
#      exit
#  fi
  cd /opt/pycom-esp-idf
  echo "Checkout pycom-esp-idf @ $IDF_HASH"
  git checkout $IDF_HASH
  git submodule update --init

}

function build() {
  BOARD=$1
  PROJECT=$2
  export PATH=$PATH:/opt/xtensa-esp32-elf/bin/
  export IDF_PATH=/opt/pycom-esp-idf
  board=`echo "$BOARD" | tr '[:upper:]' '[:lower:]'`
  cd /opt/pycom-micropython-sigfox/esp32/ &&
  make clean BOARD=$BOARD &&
  cd ../mpy-cross && make clean && make && cd ../esp32
  if stat -t /opt/frozen/*.py >/dev/null 2>&1;
  then
      cp /opt/frozen/*.py ./frozen/Base/
      if [ -f ./frozen/Base/main.py ]; then
          mv ./frozen/Base/main.py ./frozen/Base/_main.py
      fi
  fi
  make release BOARD=$BOARD RELEASE_DIR=/tmp
  #mv /tmp/*.tar.gz /opt/frozen/$board-firmware-$PROJECT.tar.gz
  OUTPUT_PATH=/opt/frozen/output
  mkdir -p $OUTPUT_PATH
  #ls -la /tmp/*.tar.gz
  for f in /tmp/*.tar.gz; do
    dest=`basename $f`
    dest=${dest/.tar.gz/-$PROJECT.tar.gz}
    echo "built output/$dest"
    mv "$f" "$OUTPUT_PATH/$dest"
  done
  #echo "Firmware $board-firmware-$PROJECT.tar.gz ready !"
  echo "end."
}

[[ $boards =~ (^|[[:space:]])$1($|[[:space:]]) ]] &&
        echo "#goinvent " ||
  usage
prepare_dev $3 $4
build $1 $2
